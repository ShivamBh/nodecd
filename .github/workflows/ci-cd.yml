name: Build and Deploy API

on:
  push:
    branches: [master]

  workflow_dispatch:

env:
  CONTAINER: nest-api

jobs:
  push_to_registry:
    name: Build & Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from package.json
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'package.json'
          prop_path: 'version'

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: skara-api
          IMAGE_TAG: ${{steps.version.outputs.prop}}
        run: |
          ls -la
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . -f Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: [push_to_registry]
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    steps:
      # - name: Convert key to PEM
      #   id: convert-key
      #   run: |
      #     echo "::set-output name=SSH_KEY::ssh-keygen -p -f ${{secrets.SSHKEY}} -m pem"

      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSHKEY }}

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      # - name: Connect to Digital Ocean Droplet
      #   uses: appleboy/ssh-action@v0.1.4
      #   with: 
      #     host: ${{secrets.HOST}}
      #     key: ${{secrets.SSHKEY}}
      #     username: ${{secrets.USERNAME}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Pull Latest Container
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: skara-api
      #     IMAGE_TAG: ${{steps.version.outputs.prop}}
      #   run: |
      # Login to registry
            # aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin https://${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.region.amazonaws.com
      #     ssh ${{secrets.USERNAME}}@${{secrets.HOST}}
      #     docker ps -q --filter "name=${{env.CONTAINER}}" | grep -q . && docker stop $CONTAINER && docker rm -fv $CONTAINER
      #     docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     docker run -p 8080:8080 -d --name=$CONTAINER $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: skara-api
          IMAGE_TAG: ${{steps.version.outputs.prop}}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: |
            echo "Logging in to ECR..."
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.ap-south-1.amazonaws.com
            echo "Logged in to ECR with docker"
            echo "Stopping containers using this image..."
            docker ps -q --filter ancestor="${{secrets.ECR_IMAGE_URI_LATEST}}" | xargs -r docker stop
            echo "Removing unused containers..."
            docker rm -v $(docker ps -a -q -f status=exited)
            echo "Removing unused images..."
            docker rmi $(docker images -f "dangling=true" -q)
            echo "Pulling fresh image from ECR"
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
            echo "Running container from ECR image..."
            docker run -p 8080:8080 -d --name=$CONTAINER ${{secrets.ECR_IMAGE_URI_LATEST}}




      